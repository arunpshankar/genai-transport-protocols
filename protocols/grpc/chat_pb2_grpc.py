# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chat_pb2 as chat__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChatServiceStub(object):
    """The Chat service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSession = channel.unary_unary(
                '/chat.ChatService/CreateSession',
                request_serializer=chat__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=chat__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.GetSessionInfo = channel.unary_unary(
                '/chat.ChatService/GetSessionInfo',
                request_serializer=chat__pb2.SessionInfoRequest.SerializeToString,
                response_deserializer=chat__pb2.SessionInfoResponse.FromString,
                _registered_method=True)
        self.ListSessions = channel.unary_unary(
                '/chat.ChatService/ListSessions',
                request_serializer=chat__pb2.ListSessionsRequest.SerializeToString,
                response_deserializer=chat__pb2.ListSessionsResponse.FromString,
                _registered_method=True)
        self.DeleteSession = channel.unary_unary(
                '/chat.ChatService/DeleteSession',
                request_serializer=chat__pb2.DeleteSessionRequest.SerializeToString,
                response_deserializer=chat__pb2.DeleteSessionResponse.FromString,
                _registered_method=True)
        self.GetServerStats = channel.unary_unary(
                '/chat.ChatService/GetServerStats',
                request_serializer=chat__pb2.ServerStatsRequest.SerializeToString,
                response_deserializer=chat__pb2.ServerStatsResponse.FromString,
                _registered_method=True)
        self.Chat = channel.stream_stream(
                '/chat.ChatService/Chat',
                request_serializer=chat__pb2.ChatRequest.SerializeToString,
                response_deserializer=chat__pb2.ChatResponse.FromString,
                _registered_method=True)


class ChatServiceServicer(object):
    """The Chat service definition
    """

    def CreateSession(self, request, context):
        """Create a new chat session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSessionInfo(self, request, context):
        """Get session information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSessions(self, request, context):
        """List all active sessions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSession(self, request, context):
        """Delete a session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerStats(self, request, context):
        """Get server statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request_iterator, context):
        """Bidirectional streaming chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=chat__pb2.CreateSessionRequest.FromString,
                    response_serializer=chat__pb2.CreateSessionResponse.SerializeToString,
            ),
            'GetSessionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSessionInfo,
                    request_deserializer=chat__pb2.SessionInfoRequest.FromString,
                    response_serializer=chat__pb2.SessionInfoResponse.SerializeToString,
            ),
            'ListSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSessions,
                    request_deserializer=chat__pb2.ListSessionsRequest.FromString,
                    response_serializer=chat__pb2.ListSessionsResponse.SerializeToString,
            ),
            'DeleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSession,
                    request_deserializer=chat__pb2.DeleteSessionRequest.FromString,
                    response_serializer=chat__pb2.DeleteSessionResponse.SerializeToString,
            ),
            'GetServerStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerStats,
                    request_deserializer=chat__pb2.ServerStatsRequest.FromString,
                    response_serializer=chat__pb2.ServerStatsResponse.SerializeToString,
            ),
            'Chat': grpc.stream_stream_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=chat__pb2.ChatRequest.FromString,
                    response_serializer=chat__pb2.ChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat.ChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """The Chat service definition
    """

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/CreateSession',
            chat__pb2.CreateSessionRequest.SerializeToString,
            chat__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSessionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetSessionInfo',
            chat__pb2.SessionInfoRequest.SerializeToString,
            chat__pb2.SessionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/ListSessions',
            chat__pb2.ListSessionsRequest.SerializeToString,
            chat__pb2.ListSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/DeleteSession',
            chat__pb2.DeleteSessionRequest.SerializeToString,
            chat__pb2.DeleteSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServerStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetServerStats',
            chat__pb2.ServerStatsRequest.SerializeToString,
            chat__pb2.ServerStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/chat.ChatService/Chat',
            chat__pb2.ChatRequest.SerializeToString,
            chat__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
