syntax = "proto3";

package chat;

// The ChatService service definition
service ChatService {
  // Create a new chat session
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  
  // Get session information
  rpc GetSessionInfo(SessionInfoRequest) returns (SessionInfoResponse);
  
  // List all active sessions
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);
  
  // Delete a session
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse);
  
  // Get server statistics
  rpc GetServerStats(ServerStatsRequest) returns (ServerStatsResponse);
  
  // Bidirectional streaming chat
  rpc Chat(stream ChatRequest) returns (stream ChatResponse);
}

// Session Management Messages
message CreateSessionRequest {
  string model_id = 1;  // Optional, defaults to gemini-2.0-flash
}

message CreateSessionResponse {
  string session_id = 1;
  string model = 2;
  bool success = 3;
  string message = 4;
}

message SessionInfoRequest {
  string session_id = 1;
}

message SessionInfoResponse {
  bool success = 1;
  string message = 2;
  string session_id = 3;
  string model = 4;
  int32 message_count = 5;
  int32 user_messages = 6;
  int32 model_messages = 7;
  int32 duration_seconds = 8;
  string created_at = 9;
}

message ListSessionsRequest {
  // Empty for now, could add pagination in the future
}

message SessionSummary {
  string session_id = 1;
  string model = 2;
  int32 message_count = 3;
  int32 duration_minutes = 4;
  string created_at = 5;
}

message ListSessionsResponse {
  repeated SessionSummary sessions = 1;
  int32 active_sessions = 2;
}

message DeleteSessionRequest {
  string session_id = 1;
}

message DeleteSessionResponse {
  bool success = 1;
  string message = 2;
}

message ServerStatsRequest {
  // Empty for now
}

message ServerStatsResponse {
  int32 uptime_seconds = 1;
  int32 total_requests = 2;
  int32 successful_requests = 3;
  int32 failed_requests = 4;
  int32 active_sessions = 5;
  int32 total_sessions_created = 6;
  double average_response_time = 7;
  string model = 8;
  string framework = 9;
}

// Chat Streaming Messages
message ChatRequest {
  enum Type {
    MESSAGE = 0;
    PING = 1;
    TYPING_START = 2;
    TYPING_STOP = 3;
  }
  
  Type type = 1;
  string session_id = 2;
  string message = 3;  // For MESSAGE type
  string timestamp = 4;
}

message ChatResponse {
  enum Type {
    STATUS = 0;
    RESPONSE_START = 1;
    CHUNK = 2;
    RESPONSE_COMPLETE = 3;
    ERROR = 4;
    PONG = 5;
    SESSION_UPDATE = 6;
  }
  
  Type type = 1;
  string session_id = 2;
  
  // Status message
  string status_message = 3;
  int32 context_messages = 4;
  
  // Chunk data
  string chunk_text = 5;
  int32 chunk_number = 6;
  bool is_final = 7;
  
  // Response completion
  int32 total_chunks = 8;
  double processing_time = 9;
  int32 message_count = 10;
  
  // Error handling
  string error_message = 11;
  
  // Session updates
  string update_type = 12;
  string update_data = 13;
  
  // Timestamp
  string timestamp = 14;
}

// Health Check Messages
message HealthRequest {
  // Empty for now
}

message HealthResponse {
  bool healthy = 1;
  string message = 2;
  string model = 3;
  double ping_ms = 4;
  int32 active_sessions = 5;
  string framework = 6;
}